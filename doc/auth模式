if ("client1".equals(s)) {
    bcd = new BaseClientDetails(s, "", "scope", "password,refresh_token", "");//在密码模式scope仍然生效，但authorities不生效，为空即可
    bcd.setClientSecret(passwordEncoder.encode("secret"));
}
if ("client2".equals(s)) {
    bcd = new BaseClientDetails(s, "", "scope", "password,refresh_token", "");
    bcd.setClientSecret(passwordEncoder.encode("secret"));
}
if ("client3".equals(s)) {
    bcd = new BaseClientDetails(s, "", "scope1", "client_credentials,refresh_token", "res1");//在client模式scope,authorities都生效
    bcd.setClientSecret(passwordEncoder.encode("secret"));
}
if ("client4".equals(s)) {
    bcd = new BaseClientDetails(s, "", "scope1,scope2", "client_credentials,refresh_token", "res1,res2");
    bcd.setClientSecret(passwordEncoder.encode("secret"));
}

if ("client5".equals(s)) {
    bcd = new BaseClientDetails(s, "", "scope1,scope2", "authorization_code,refresh_token", "res1,res2");
    bcd.setClientSecret(passwordEncoder.encode("secret"));
}


//客户端指的是各个子系统，比如有百度贴吧，百度网盘，百度外卖等，它们都可以共用一套用户系统
//这里的客户端信息实际上应该从数据库获取
//这里为了演示方便就新建了三个client
//一是client1，密码模式，scope有app
//一是client2，密码模式，scope有app
//一是client3，client模式，scope有app,资源权限有res1
//一是client4，client模式，scope有app,资源权限有res1，res2
//请求参数离如果有多个scope则用加号连接如“scope=app+admin”，不传则默认全部scope
//密码模式
//post http://ip:port/oauth/token?client_id=**&client_secret=**&grant_type=password&username=**&password=**&scope=**
//post http://ip:port/oauth/token?client_id=**&client_secret=**&grant_type=refresh_token&scope=**
// response示例：
// {
//"access_token": "6d7bc18f-8179-4b2a-8fe2-af1a92049431",
//        "token_type": "bearer",
//        "refresh_token": "23b36405-2b17-4ba2-887e-53698e088215",
//        "expires_in": 43200,
//        "scope": "all"
//}
//client模式
//http://ip:port/oauth/token?grant_type=client_credentials&scope=**&client_id=**&client_secret=**
//response示例：{"access_token":"56465b41-429d-436c-ad8d-613d476ff322","token_type":"bearer","expires_in":25074,"scope":"a


  //BCrypt 生成
  public static void main(String[] args) {
        // Hash a password for the first time
        String password = "secret";
        String hashed = BCrypt.hashpw(password, BCrypt.gensalt());
        System.out.println(hashed);
// gensalt's log_rounds parameter determines the complexity
// the work factor is 2**log_rounds, and the default is 10
        String hashed2 = BCrypt.hashpw(password, BCrypt.gensalt(12));

// Check that an unencrypted password matches one that has
// previously been hashed
        String candidate = "testpassword";
//String candidate = "wrongtestpassword";
        if (BCrypt.checkpw(candidate, hashed)) {
            System.out.println("It matches");

        } else {
            System.out.println("It does not match");

        }
    }


        /**
             * 纯jdbc实现
             */
    //        JdbcClientDetailsService clientDetailsService = new JdbcClientDetailsService(dataSource);
    //        clientDetailsService.setSelectClientDetailsSql(SecurityConstants.DEFAULT_SELECT_STATEMENT);
    //        clientDetailsService.setFindClientDetailsSql(SecurityConstants.DEFAULT_FIND_STATEMENT);
    //        clients.withClientDetails(clientDetailsService);



resources.resourceId("authorize-server"); //重点，设置资源id

把资源id加到clientdetails中 手动添加resourceId （JDBC模式）

否则会报以下错误
{
 "error":"access_denied",
 "error_description":"Invalid token does not contain resource id (oauth2-resource)"
}


生成JWT
@Bean
public JwtAccessTokenConverter jwtAccessTokenConverter() {
    JwtAccessTokenConverter converter = new JwtAccessTokenConverter() {
        @Override
        public OAuth2AccessToken enhance(OAuth2AccessToken accessToken, OAuth2Authentication authentication) {
            String grantType = authentication.getOAuth2Request().getGrantType();
            //只有如下两种模式才能获取到当前用户信息
            if("authorization_code".equals(grantType) || "password".equals(grantType)) {
                String userName = authentication.getUserAuthentication().getName();
                log.info("用户信息 {}", JSONObject.toJSONString(authentication.getUserAuthentication()));
                Map<String, Object> additionalInformation = new HashMap<>(16);
                additionalInformation.put("user_name", userName);
                ((DefaultOAuth2AccessToken) accessToken).setAdditionalInformation(additionalInformation);
            }
            return super.enhance(accessToken, authentication);
        }
    };
    KeyPair keyPair = new KeyStoreKeyFactory(new ClassPathResource("kevin_key.jks"), "123456".toCharArray())
            .getKeyPair("kevin_key");
    converter.setKeyPair(keyPair);
    return converter;
}

auth 验证器
OAuth2AuthenticationManager authenticate

RemoteTokenServices loadAuthentication

public OAuth2Authentication loadAuthentication(String accessToken) throws AuthenticationException, InvalidTokenException {

		MultiValueMap<String, String> formData = new LinkedMultiValueMap<String, String>();
		formData.add(tokenName, accessToken);
		HttpHeaders headers = new HttpHeaders();
		headers.set("Authorization", getAuthorizationHeader(clientId, clientSecret));
		Map<String, Object> map = postForMap(checkTokenEndpointUrl, formData, headers);

		if (map.containsKey("error")) {
			if (logger.isDebugEnabled()) {
				logger.debug("check_token returned error: " + map.get("error"));
			}
			throw new InvalidTokenException(accessToken);
		}

		// gh-838 在Hoxton.SR5 下map.get("active") 会变成字符串 导致严重不通过
		if (!Boolean.TRUE.equals(map.get("active"))) {
			logger.debug("check_token returned active attribute: " + map.get("active"));
			throw new InvalidTokenException(accessToken);
		}

		return tokenConverter.extractAuthentication(map);
}